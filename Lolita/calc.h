#pragma once
// THIS FILE IS GENERATED BY PROJ LOLITA
// DO NOT MODIFY!!!

#include "ast-include.h"
#include <text/format.hpp>
#include <string_view>

namespace eds::loli
{
	enum BinaryOp
	{
		Plus, Minus, Asterisk, Slash,
	};

	struct Expression : public AstObjectBase 
	{
		virtual void Print(std::string_view data, int ident) { };
	};

	struct LiteralExpression : public Expression
	{
		Token value;

		void Print(std::string_view data, int ident) override
		{
			for (int i = 0; i < ident; ++i) putchar(' ');

			eds::text::PrintFormatted("int {}\n", data.substr(value.offset, value.length));
		}
	};

	struct BinaryExpression : public Expression
	{
		Expression* lhs;
		BinaryOp op;
		Expression* rhs;

		void Print(std::string_view data, int ident) override
		{
			for (int i = 0; i < ident; ++i) putchar(' ');
			switch (op)
			{
			case eds::loli::Plus:
				printf("+\n");
				break;
			case eds::loli::Minus:
				printf("-\n");
				break;
			case eds::loli::Asterisk:
				printf("*\n");
				break;
			case eds::loli::Slash:
				printf("/\n");
				break;
			}

			lhs->Print(data, ident + 2);
			rhs->Print(data, ident + 2);
		}
	};

	class AstTrait_BinaryOp : public BasicAstTrait<BinaryOp> { };
	class AstTrait_Expression : public BasicAstTrait<Expression> { };
	class AstTrait_LiteralExpression : public BasicAstTrait<LiteralExpression>
	{
	public:
		void AssignField(AstItem obj, int codinal, AstItem value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->value, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTrait_BinaryExpression : public BasicAstTrait<BinaryExpression>
	{
	public:
		void AssignField(AstItem obj, int codinal, AstItem value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->lhs, value);
				break;
			case 1:
				QuickAssignField(p->op, value);
				break;
			case 2:
				QuickAssignField(p->rhs, value);
				break;
			default: throw 0;
			}
		}
	};

	inline std::unique_ptr<AstTraitManager> GetAstTraitManager()
	{
		auto result = std::make_unique<AstTraitManager>();
		
		result->Register<AstTrait_BinaryOp>("BinaryOp");
		result->Register<AstTrait_Expression>("Expression");
		result->Register<AstTrait_LiteralExpression>("LiteralExpression");
		result->Register<AstTrait_BinaryExpression>("BinaryExpression");

		return result;
	}
}