// THIS FILE IS GENERATED BY PROJ. LOLITA.
// PLEASE DO NOT MODIFY!!!
//

#include "lolita-include.h"

namespace eds::loli
{

	// Forward declarations
	//

	struct Literal;
	struct Type;
	struct Expression;
	struct Statement;

	struct BoolLiteral;
	struct IntLiteral;
	struct NamedType;
	struct BinaryExpr;
	struct NamedExpr;
	struct LiteralExpr;
	struct VariableDeclStmt;
	struct JumpStmt;
	struct ReturnStmt;
	struct CompoundStmt;
	struct WhileStmt;
	struct ChoiceStmt;
	struct TypedName;
	struct FuncDecl;
	struct TranslationUnit;

	// Class definitions
	//

	enum BoolValue
	{
		True,
		False,
	};
	enum BinaryOp
	{
		Asterisk,
		Slash,
		Modulus,
		Plus,
		Minus,
		And,
		Or,
		Xor,
		Gt,
		GtEq,
		Ls,
		LsEq,
		Eq,
		NotEq,
		LogicAnd,
		LogicOr,
	};
	enum JumpCommand
	{
		Break,
		Continue,
	};
	enum VariableMutability
	{
		Val,
		Var,
	};

	struct Literal : public AstObjectBase
	{
		struct Visitor
		{
			virtual void Visit(BoolLiteral&) = 0;
			virtual void Visit(IntLiteral&) = 0;
		};

		virtual void Accept(Visitor&) = 0;
	};
	struct Type : public AstObjectBase
	{
		struct Visitor
		{
			virtual void Visit(NamedType&) = 0;
		};

		virtual void Accept(Visitor&) = 0;
	};
	struct Expression : public AstObjectBase
	{
		struct Visitor
		{
			virtual void Visit(BinaryExpr&) = 0;
			virtual void Visit(NamedExpr&) = 0;
			virtual void Visit(LiteralExpr&) = 0;
		};

		virtual void Accept(Visitor&) = 0;
	};
	struct Statement : public AstObjectBase
	{
		struct Visitor
		{
			virtual void Visit(VariableDeclStmt&) = 0;
			virtual void Visit(JumpStmt&) = 0;
			virtual void Visit(ReturnStmt&) = 0;
			virtual void Visit(CompoundStmt&) = 0;
			virtual void Visit(WhileStmt&) = 0;
			virtual void Visit(ChoiceStmt&) = 0;
		};

		virtual void Accept(Visitor&) = 0;
	};

	struct BoolLiteral : public Literal
	{
		BoolValue content;

	public:
		void Accept(Literal::Visitor& v) override { v.Visit(*this); }
	};
	struct IntLiteral : public Literal
	{
		Token content;

	public:
		void Accept(Literal::Visitor& v) override { v.Visit(*this); }
	};
	struct NamedType : public Type
	{
		Token name;

	public:
		void Accept(Type::Visitor& v) override { v.Visit(*this); }
	};
	struct BinaryExpr : public Expression
	{
		BinaryOp op;
		Expression* lhs;
		Expression* rhs;

	public:
		void Accept(Expression::Visitor& v) override { v.Visit(*this); }
	};
	struct NamedExpr : public Expression
	{
		Token id;

	public:
		void Accept(Expression::Visitor& v) override { v.Visit(*this); }
	};
	struct LiteralExpr : public Expression
	{
		Literal* content;

	public:
		void Accept(Expression::Visitor& v) override { v.Visit(*this); }
	};
	struct VariableDeclStmt : public Statement
	{
		VariableMutability mut;
		Token name;
		Type* type;
		Expression* value;

	public:
		void Accept(Statement::Visitor& v) override { v.Visit(*this); }
	};
	struct JumpStmt : public Statement
	{
		JumpCommand command;

	public:
		void Accept(Statement::Visitor& v) override { v.Visit(*this); }
	};
	struct ReturnStmt : public Statement
	{
		Expression* expr;

	public:
		void Accept(Statement::Visitor& v) override { v.Visit(*this); }
	};
	struct CompoundStmt : public Statement
	{
		AstVector<Statement*>* children;

	public:
		void Accept(Statement::Visitor& v) override { v.Visit(*this); }
	};
	struct WhileStmt : public Statement
	{
		Expression* pred;
		Statement* body;

	public:
		void Accept(Statement::Visitor& v) override { v.Visit(*this); }
	};
	struct ChoiceStmt : public Statement
	{
		Expression* pred;
		Statement* positive;
		Statement* negative;

	public:
		void Accept(Statement::Visitor& v) override { v.Visit(*this); }
	};
	struct TypedName : public AstObjectBase
	{
		Token name;
		Type* type;
	};
	struct FuncDecl : public AstObjectBase
	{
		Token name;
		AstVector<TypedName*>* params;
		Type* ret;
		AstVector<Statement*>* body;
	};
	struct TranslationUnit : public AstObjectBase
	{
		AstVector<FuncDecl*>* functions;
	};

	// Proxy definitions
	//

	class AstTypeProxy_BoolValue : public BasicAstTypeProxy<BoolValue> { };
	class AstTypeProxy_BinaryOp : public BasicAstTypeProxy<BinaryOp> { };
	class AstTypeProxy_JumpCommand : public BasicAstTypeProxy<JumpCommand> { };
	class AstTypeProxy_VariableMutability : public BasicAstTypeProxy<VariableMutability> { };

	class AstTypeProxy_Literal : public BasicAstTypeProxy<Literal> { };
	class AstTypeProxy_Type : public BasicAstTypeProxy<Type> { };
	class AstTypeProxy_Expression : public BasicAstTypeProxy<Expression> { };
	class AstTypeProxy_Statement : public BasicAstTypeProxy<Statement> { };

	class AstTypeProxy_BoolLiteral : public BasicAstTypeProxy<BoolLiteral>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->content, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_IntLiteral : public BasicAstTypeProxy<IntLiteral>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->content, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_NamedType : public BasicAstTypeProxy<NamedType>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->name, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_BinaryExpr : public BasicAstTypeProxy<BinaryExpr>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->op, value);
				break;
			case 1:
				QuickAssignField(p->lhs, value);
				break;
			case 2:
				QuickAssignField(p->rhs, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_NamedExpr : public BasicAstTypeProxy<NamedExpr>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->id, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_LiteralExpr : public BasicAstTypeProxy<LiteralExpr>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->content, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_VariableDeclStmt : public BasicAstTypeProxy<VariableDeclStmt>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->mut, value);
				break;
			case 1:
				QuickAssignField(p->name, value);
				break;
			case 2:
				QuickAssignField(p->type, value);
				break;
			case 3:
				QuickAssignField(p->value, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_JumpStmt : public BasicAstTypeProxy<JumpStmt>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->command, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_ReturnStmt : public BasicAstTypeProxy<ReturnStmt>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->expr, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_CompoundStmt : public BasicAstTypeProxy<CompoundStmt>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->children, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_WhileStmt : public BasicAstTypeProxy<WhileStmt>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->pred, value);
				break;
			case 1:
				QuickAssignField(p->body, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_ChoiceStmt : public BasicAstTypeProxy<ChoiceStmt>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->pred, value);
				break;
			case 1:
				QuickAssignField(p->positive, value);
				break;
			case 2:
				QuickAssignField(p->negative, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_TypedName : public BasicAstTypeProxy<TypedName>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->name, value);
				break;
			case 1:
				QuickAssignField(p->type, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_FuncDecl : public BasicAstTypeProxy<FuncDecl>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->name, value);
				break;
			case 1:
				QuickAssignField(p->params, value);
				break;
			case 2:
				QuickAssignField(p->ret, value);
				break;
			case 3:
				QuickAssignField(p->body, value);
				break;
			default: throw 0;
			}
		}
	};
	class AstTypeProxy_TranslationUnit : public BasicAstTypeProxy<TranslationUnit>
	{
	public:

		void AssignField(AstTypeWrapper obj, int codinal, AstTypeWrapper value) override
		{
			auto p = obj.Extract<StoreType>();
			switch (codinal)
			{
			case 0:
				QuickAssignField(p->functions, value);
				break;
			default: throw 0;
			}
		}
	};

	// Proxy manager
	//

	inline std::unique_ptr<AstTypeProxyManager> CreateAstTypeProxyManager()
	{
		auto result = std::make_unique<AstTypeProxyManager>();

		result->Register<AstTypeProxy_BoolValue>("BoolValue");
		result->Register<AstTypeProxy_BinaryOp>("BinaryOp");
		result->Register<AstTypeProxy_JumpCommand>("JumpCommand");
		result->Register<AstTypeProxy_VariableMutability>("VariableMutability");

		result->Register<AstTypeProxy_Literal>("Literal");
		result->Register<AstTypeProxy_Type>("Type");
		result->Register<AstTypeProxy_Expression>("Expression");
		result->Register<AstTypeProxy_Statement>("Statement");

		result->Register<AstTypeProxy_BoolLiteral>("BoolLiteral");
		result->Register<AstTypeProxy_IntLiteral>("IntLiteral");
		result->Register<AstTypeProxy_NamedType>("NamedType");
		result->Register<AstTypeProxy_BinaryExpr>("BinaryExpr");
		result->Register<AstTypeProxy_NamedExpr>("NamedExpr");
		result->Register<AstTypeProxy_LiteralExpr>("LiteralExpr");
		result->Register<AstTypeProxy_VariableDeclStmt>("VariableDeclStmt");
		result->Register<AstTypeProxy_JumpStmt>("JumpStmt");
		result->Register<AstTypeProxy_ReturnStmt>("ReturnStmt");
		result->Register<AstTypeProxy_CompoundStmt>("CompoundStmt");
		result->Register<AstTypeProxy_WhileStmt>("WhileStmt");
		result->Register<AstTypeProxy_ChoiceStmt>("ChoiceStmt");
		result->Register<AstTypeProxy_TypedName>("TypedName");
		result->Register<AstTypeProxy_FuncDecl>("FuncDecl");
		result->Register<AstTypeProxy_TranslationUnit>("TranslationUnit");

		return result;
	}
}
